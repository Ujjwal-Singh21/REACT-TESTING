2) JEST vs RTL:
===============

JEST:
-----

- JavaScript test runner.

- JavaScript Tesing Framework

- Jest find tests, run tests, determine whether tests passed or failed and reports it back in a human readable manner.


React Testing Library:
----------------------

- JavaScript testing utility that provides virtual DOm for testing React Components.

- React Testing Library provides a virtual DOM which we can use to interact with and verify the behaviour of a React Component.

- Test Library is infact a family of packages which help tests UI components.

- The core library is called DOM testing library and React Testing Library is simply a wrapper around this core library to test React
components in an easier way. 


-----------------------------------------------------------------------------------------------------------------------------------


7) Anatomy:
===========

App.test.tsx:
-------------
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


- render() and screen is imported from react testing library.

- render() method is used to create virtual DOM for <App /> component.

- screen has a reference to document object, so it is also an object which has methods that takes either a string or regex to query
 the created virtual DOM.

- test() and expect() methods are by default provided by create-react-app in all test files globally, to write our tests.

- test() fn has 3 arguments -> test(name of the test, a function that contains expectations for test, a timeout to specify after
how many seconds the test should abort. By default it is 5 seconds.

- We use different matchers with expect() function to write the tests.
 

--------------------------------------------------------------------------------------------------------------------------------------

9) TDD (Test Driven Development):
=================================

- Test Driven Development is a software development process where you write tests before writing the software code.

- Once the tests have been written, you then write the code to ensure the tests pass.

- Also called as RED-GREEN-TESTING as all tests goes from a red failed state to green passed state.

There are 3 steps involved:
---------------------------

1) Create tests that specify the functionality of a specific feature.

2) Write software code that will run the tests successfully when re-executed.

3) Refactor the code for optimization while ensuring the tests continue to pass.


---------------------------------------------------------------------------------------------------------------------------------------

10) JEST Watch Mode:
====================

- Watch mode is an option that we can pass to JEST asking to watch files that have changed since last commit and execute tests related
to only those changed files.

- An optimazion designed to make your tests run fast regardless of how many tests you have. 


11) FIltering Tests:
====================

- In terminal using options given by using filename or testname.

- test.only or test.skip methods to run only that test and skip others or skip only that test and run others respectively.


12) Grouping Tests:
===================

- use gloabl describe() method from jest to gropu multiple tests together.

- it takes 2 args very similar to test method, where arg1 is name and arg2 is expectations to be tested or many test() methods.

- We can use skip and only with describe() also for filering purpose.

- We can have a describe() inside another describe() as nested.

- We can have multiple describe() in the same files.


13) Filename conventions:
=========================

- We can use .test.js or .test.tsx or .spec.ts or .spec.tsx or a test file under folder __tests__ inside src folder.

- We can also use it() method instead of test().

- To achieve test.skip and test.only, we can use fit() and xit() respectively.



14) Code Coverage:
==================

- A metric that can help you understand how much of your software code is tested.

* Statement Coverage - How many statements in the software code have been execuetd.

* Branches Coevrage - How many of the branches of the control structure (if statement for instance) have been executed.

* Function Coverage - How many of the functions defined have been called.

* Line Coverage - How many lines of the source code have been tested.


steps to achieve:
-----------------

- In package.json inside script add -> "coverage": "yarn test --coverage"

- Use yarn coverage in terminal to get the coverage report.

- To avoid coverage of some red flagged files and other few files like greet.type.ts for eg, change coverage property value to this

eg:  "coverage": "yarn test --coverage --watchAll --collectCoverageFrom='src/components/**/*.{ts,tsx}' 
                            --collectCoverageFrom='!src/components/**/*.{types, stories, constants, test, spec}.{ts,tsx}'",



-----------------------------------------------------------------------------------------------------------------------------------------


16) What to test and what not to test?
======================================

To Test:
--------

- Test that the component renders.

- Test that the component renders correctly with props.

- Test that component renders with different states.

- Test that component reacts to events.


No to Test:
-----------

- Implementation details. (As it is against RTL rule that ur test should resemble how ur software is sued by a user and not by how 
  your software is implemented internally).

- Any third party code / External Libraries. (like material UI buttons and tabs)

- Code that is not important from a user point of view.


17) RTL Queries:
================

- Every Test we write generally involves the following steps:

1) Render the component. (using render() method from RTL)

2) Find an element rendered by component. (using queries from RTL to query the rendred virtual DOM)

3) Assert against that element. (using matchers or custom matchers from JEST/JEST-DOM.)

- Queries are methods that RTL provides to find elements on the page.

- To find a single element on a page, we have:

* getBy..
* findBy..
* queryBy...

- To find a multiple elements on a page, we have:

* getAllBy..
* findAllBy..
* queryAllBy...


- These methods gets completed by suffix from one of these:

* Role
* LabelText
* PlaceHolderText
* Text
* DisplayValue
* AltText
* Title
* TestId


focusing on getBy... queries:
=============================

- getBy... class of queries return the matching node for a query,

- throws a descriptive error if no match,

- or if more than one match is found.


18) getByRole():
================

- By default, many semantic elements in HTML have a role.

- Button - button, input - textbox, h1,h6 - heading, a tag - link, checkbox & Radio - checkbox&radio, SelectDropdown - combobox

- If u are working with elements that do not have a default role or if you want to specify a diffrent role, we can make use of
  role attribute.

- eg: To use an anchor element as a button in navbar -> <a href='' role='button'/>

- Link to find roles of different elements: https://www.w3.org/TR/html-aria/#docconformance


19) getByRole() options:
========================

- If there are multiple elements with the same role, we may get error while writing our tests.

- To solve that we can pass a 2nd argument to our getByRole() query method.

- That will be an object with a key value pair.

- Key can be name, level, selected, checked etc.

- The accessible name is for simple cases equal to 

1) The Label of a form element.

2) The text content of a button.

3) The value of the aria-label attribute.

example:
--------
const jobHeadingElement = screen.getByRole('heading', {
      // name: 'Job application form'
      level: 1
    });
    expect(jobHeadingElement).toBeInTheDocument()

    const sectionHeadingElement = screen.getByRole('heading', {
      // name: 'Section 1'
      level: 2
    });
    expect(sectionHeadingElement).toBeInTheDocument()

    const nameElement = screen.getByRole('textbox', {
      name: 'Name'
    });
    expect(nameElement).toBeInTheDocument()

    const bioElement = screen.getByRole('textbox', {
      name: 'Bio' // name spelling is case sensitive
    });
    expect(bioElement).toBeInTheDocument()





20) getByLabelText():
=====================

- This query method searches a label that matches the specified text and then

- Returns the element associated with that label.

- If multiple lables are found with same text, 

- use 2nd arg to this query method and specify like this: { selector: 'input' }

eg:  const nameElement2 = screen.getByLabelText('Name', {
      selector: 'input'
      });
     expect(nameElement2).toBeInTheDocument()

- It also works very well with wrapped labels.

->  <div>
        <label> <input type="checkbox" id="terms" /> I agree to the terms and conditions </label>
    </div>

eg: 



21) getByPlaceHolder():
=======================

- This query will search for all elements with a placeholder attribute and returns one that matches the given text.

-> <input type="text" id="name" placeholder="Fullname" />

eg:   const nameElement3 = screen.getByPlaceholderText('Fullname');
      expect(nameElement3).toBeInTheDocument()


22) getByText():
================

- It searches for all elements that have a text node with text content matching the given content.

- Typically, it is used to find paragraph, div or span elements. 

- It also takes selector prop like getByLabelText()

eg:
---
const paragraphElement = screen.getByText('All fields are mandatory') 
expect(paragraphElement).toBeInTheDocument()


23) getByDisplayValue():
=======================

- It returns input, textarea or select element that has the matching display value.

- Typically you will use this when you want to use Form Controls based on their values.

eg:
--

-> <input type="text" id="name" placeholder="Fullname" value="Vishwas" onChange={() => {}} />

const nameElement4 = screen.getByDisplayValue('Vishwas');
expect(nameElement4).toBeInTheDocument()



24) getByAltText():
===================

- getByAltText() will return the element that has the given alt text.

- This method only supports elements which accepts an alt attribute like <img>, <input>, <area> or custom HTML elements.

eg:
---

-> <img src="https://via.placeholder.com/150" alt="a person with a laptop" />

 const imageElement = screen.getByAltText('a person with a laptop')
 expect(imageElement).toBeInTheDocument()



25) getByTitle():
=================

- It returns the element that has the matching title attribute.

eg: 
---

-> <span title="close"> X </span>

const titleElement = screen.getByTitle('close')
expect(titleElement).toBeInTheDocument()



26) getByTestId():
==================

- It returns the element that has the matching data-testid attribute.

eg:
---

->  <div data-testid="custom-element">Custom HTML element</div>

const customElement = screen.getByTestId('custom-element')
expect(customElement).toBeInTheDocument();


28) Skills folder

29) TextMatch:
==============

- TextMatch represents a type which can be either a 

* String
* Regex
* Function

String:
-------
<div> Hello World </div>

screen.getByText('Hello World') // full string match

screen.getByText('llo World', {exact: false}) // substring match

acreen.getByText('hello world', {exact: false}) // full string match Ignore case



Regex:
------
<div> Hello World </div>

screen.getByText(/World/) // Substring match

screen.getByText(/world/i}) // substring match ignore case

acreen.getByText(/^hello world$/i) // full string match Ignore case



Function:
---------
<div> Hello World </div>

(content?: string , element?: Element | null) => boolean

screen.getByTextContent((content) => content.startsWith('Hello'));  



30) queryBy and queryAllBy:
============================

queryBy:
--------

- returns the matching node for a query, and returns null if no elements match.

- Useful for asserting an element that is not present

- throws an error if more than one match is found.


queryAllBy:
-----------

- returns an Array of all matching nodes for a query, 

- returns an empty array if no elements match.


31) findBy:
===========

appearance & disapperance:
--------------------------

- What if elements are not present in the DOM to begin but make their way to the DOM after sometime.

- For example Data that is fetched from the server will be rendered only after a few miliseconds.


findBy and findAllBy:
---------------------

- They are useful to wait for an element to appear or disappear in response to an event, user action, timeout or promise.


findBy:
-------

- Returns a Promise which gets resolves when an element is found which matches the given query.

- The Promise is rejected if no eleemnt is found or if more than one element is found after a default timeout of 1000 ms.


findAllBy:
----------

- Returns a Promise which resolves to an Array of elements when any elements are found which matches the given query.

- The Promise is rejected if no elements are found after a default timeout of 1000 ms.

* Make use of async await during this case.

* Using normal getByRole() query method throws this error because it does not wait for any element to appear after some time.

error: TestingLibraryElementError: Unable to find an accessible element with the role "button" and name "Start Learning"

- We can also pass a 3rd arg to findBy() and findAllBy() to extend default timeout from more than 1000 ms like this,

  { timeout: 2000 }


eg:
---

useEffect(() => {
    setTimeout(() => {
      setisLoggedIn(true)
    }, 1001)
}, [])


Test Code:
----------

test('Start Learning button is eventually displayed', async () => {
    render(<Skills skills={skills} />)

    const startLearningButton = await screen.findByRole('button', {
      name: 'Start Learning'
    },
    {
      timeout: 2000
    })
    expect(startLearningButton).toBeInTheDocument()
})


33) Debugging:
==============

- Already RTL provides us a formatted DOM tree and readable error message if any tests fails.

- We can use screen.debug() before and after querying the VIRTUAL DOM to get 2 formatted DOM trees one intial and other after

 a particular time has passed.

- It helps us to visualize the formatted state of the DOM tree at any point during the test.

- We can also use logRoles() function RTL to print out a list of all the implicit aria-roles within the DOM tree.

- To use it -> import { logRoles } from "@testing-library/react";

- Both of them are very useful for debugging tests.


Example:
--------
 test('Start Learning button is eventually displayed', async () => {

   const view =  render(<Skills skills={skills} />)

   logRoles(view.container)

   screen.debug()

    const startLearningButton = await screen.findByRole('button', {
      name: 'Start Learning'
    },
    {
      timeout: 2000
    })

    screen.debug()
    expect(startLearningButton).toBeInTheDocument()
  })



logRoles(view.container) output:
--------------------------------
console.log
      list:

      Name "":
      <ul />
      
      --------------------------------------------------
      listitem:
      
      Name "":
      <li />

      Name "":
      <li />

      Name "":
      <li />

      --------------------------------------------------
      button:

      Name "Login":
      <button />

      -------------------------------------------------- 


screen.debug() outputs:
-----------------------

 console.log
      <body>
        <div>
          <ul>
            <li>
              HTML
            </li>
            <li>
              CSS
            </li>
            <li>
              JavaScript
            </li>
          </ul>
          <button>
             Login
          </button>
        </div>
      </body>

      at logDOM (node_modules/@testing-library/dom/dist/pretty-dom.js:87:13)

    console.log
      <body>
        <div>
          <ul>
            <li>
              HTML
            </li>
            <li>
              CSS
            </li>
            <li>
              JavaScript
            </li>
          </ul>
          <button>
             Start Learning
          </button>
        </div>
      </body>


34) Testing PlayGround Chrome Extension:
========================================

- We can use this to find best queries to select elements when writing tests.

- When You install the extension, it will add a new panel to chrome DevTool 

- Which allows you to select elements in the browser, while suggesting the best way to find that element.



35) User Interactions:
======================

user-event:
-----------

- A companion library for testing library that simulates user interactions by dispatching the events that would happen if the 
interactions took place in a browser.

- It is the recommended way to Test user interactions with RTL.


user-event vs fireEvent:
------------------------

* fireEvent is a method from RTL which is used to dispatch DOM events.

* user-event simulate full interactions, which may fire multiple events and do additional checks along the way.

* For example we can dispatch the change event on an inputfield using fireEvent.

* When a user type into a text box, the element has to be focussed, and then keyboard and input events are fired and the selection and value on the element are manupulated as they type.

* user-event allow you to describe a full user interaction instead of a concrete event. It add visibility and interactibility checks
along the way and manupulates the DOM just like a user interaction in the browser would.

* It factors in that the browser  eg: wouldn't let a user click a hidden element or type in a disabled text box.


-> By default create react app provides us user-event

-> Update it to latest version using -> yarn upgrade @testing-library/user-event@latest


36) Pointer Interactions:
=========================

- Simulate user clicking a button to increment a counter value.

- We achieve this with the help of user-event 

- import user from '@testing-library/user-event'

- call user.setUp() right before render()

- use async await because all apis from user-event is asynchronous.

Convenience apis:
-----------------

* click(), doubleClick(), tripleClick(), 
* hover(), unHover() -> used in tooltip testing cases


Low level pointer apis:
=======================

-> pointer({ keys: '[MouseLeft]' })

-> pointer({ keys: '[MouseLeft][MouseRight]' })

-> pointer('[MouseLeft][MouseRight]')

-> pointer('[MouseLeft>]') - ensure a pressed button is not relased

-> pointer('[/MouseLeft]') - ensure to release previousaly pressed button



Example:
--------

test('renders a count of 1 after clicking the Increment button', async () => {
  user.setup()  // creating an instance of user-event 
  render(<Counter />)

  const incrementButtonElement = screen.getByRole('button', {
    name: 'Increment'
  })

  await user.click(incrementButtonElement)
  const countElement = screen.getByRole('heading');
  expect(countElement).toHaveTextContent('1');
  })

  
  test('renders a count of 2 after double clicking increment button', async () => {
    user.setup() // creating an instance of user-event 
    render(<Counter />)

    const incrementButtonElement = screen.getByRole('button', {
      name: 'Increment'
    })

    await user.dblClick(incrementButtonElement);

    const countElement = screen.getByRole('heading');
    expect(countElement).toHaveTextContent('2');
  })




37) Keyboard Interactions:
==========================

- role of an input of type number is spinbutton and not textbox.

Example:
--------
 // 5
  test('render a count of 10 after clicking the Set button', async () => {
    user.setup()
    render(<Counter />)

    // role of an input of type number is spinbutton and not textBox
    const inputAmountElement = screen.getByRole('spinbutton'); 
    await user.type(inputAmountElement, '10')
    expect(inputAmountElement).toHaveValue(10);

    const setButtonElement = screen.getByRole('button', {
      name: 'Set' 
    })
    await user.click(setButtonElement);

    const countElement = screen.getByRole('heading');
    expect(countElement).toHaveTextContent('10')
  })


Focus order test:
-----------------

test('Elements are focussed in the right order', async () => {
    user.setup();
    render(<Counter />);

    const incrementButtonElement = screen.getByRole('button', { name: 'Increment'});
    const inputAmountElement = screen.getByRole('spinbutton');
    const setButtonElement = screen.getByRole('button', { name: 'Set'})

    await user.tab()
    expect(incrementButtonElement).toHaveFocus();

    await user.tab()
    expect(inputAmountElement).toHaveFocus();

    await user.tab()
    expect(setButtonElement).toHaveFocus();
  })


Keyboard Interactions:
----------------------

- type() and tab() are not the part of keyboard API.

- type() is from UTILITY API.

- tab() is from CONVENIENCE API.

- There is only one Convenience api which is tab(), but there are quite a few Utility api.


examples of other Utility APIs for testing Keyboard Interactions:
-----------------------------------------------------------------

1) clear() - Used to easily clear an editable element.

- Here is the test code for an TextArea element with a default value, clear() called on that element and asserting the value is clear
  after asserting.



  test('Clear', async () => {
    render(<textarea defaultValue = 'Hello World' />)

    const textAreaElement = screen.getByRole('textbox');
    await user.clear(textAreaElement);

    expect(textAreaElement).toHaveValue('')
  })



2) selectOptions() and deselectOptions():
-----------------------------------------

-  They are used to easily select and diselect elements in select dropdown or a listbox where you can select multiple elements.


selectOptions():
----------------

- Here is an example of a test that uses selectOptions Api to select multiple options in a multiselect dropdown.

example:
--------

 test('Select Options ', async () => {
    render(
      <select multiple>
        <option value='1'> A </option>
        <option value='2'> B </option>
        <option value='3'> C </option>
      </select>
    )

    const listBoxElement = screen.getByRole('listbox');
    await user.selectOptions(listBoxElement, ['1', 'C']);

    const optionElement1 = screen.getByRole('option', {
      name: 'A'
    })

    const optionElement2 = screen.getByRole('option', {
      name: 'B'
    })

    const optionElement3 = screen.getByRole('option', {
      name: 'C'
    })

    expect(optionElement1.selected).toBe(true)
    expect(optionElement2.selected).toBe(false)
    expect(optionElement3.selected).toBe(true)


deselectOptions():
------------------

- Here is an example of deselectOptions.

- We are deslectiong an option with value 2 and we are expecting the selection to be false in our assertion.


example:
--------

  test('deselectOptions',  async () => {

    render(
      <select multiple>
        <option value='1'> A </option>
        <option value='2' selected> B </option>
        <option value='3'> C </option>
      </select>
    )

    const listBoxElement = screen.getByRole('listbox');
    await user.deselectOptions(listBoxElement, '2');

    const OptionBElement = screen.getByText('B');
    expect(OptionBElement.selected).toBe(false)
  })


upload():
---------

- The last utility API is upload().

- Which is used to change a file input as if the user clicked it and selected files  in the resulting file upload dialog.

example:
--------

test('upload file',  async () => {

    render(
     <div>
      <label htmlFor="file-uploader"> Upload File: </label>
      <input id='file-uploader' type='file'/>
     </div>
    )

    const file = new File(['hello'], 'hello.png', {
      type: 'image/png'
    })

    const input = screen.getByLabelText(/upload file/i)

    await user.upload(input, file)

    expect(input.files[0]).toBe(File)
    expect(input.isDefaultNamespace.item(0)).toBe(file)
    expect(input.files).toHaveLength(1)
  })


Clipboard APis:
---------------

- copy(), cut(), paste()



38) Providers:
==============

- Initially while testing we get error expected dark mode and recieved light mode.

- This is because in our Testing Environment, when we render <MuiMode /> component, It is not wrapped with <AppProvider>, and hence
  it is not able to recieve provide theme and hence we get error.

- To solve that we pass 2nd arg as an object to render() method while getting hold of artifficial DOM from RTL.

-  render(<MuiMode />, {
      wrapper: AppProvider
    })




39) Custom Render Functions:
============================

- If you think about previous above topic, in real time application we would want almost every component to be wrapped with ThemeProvider, which is called as AppProvider in our case.

- Which is something like, AppProvider is necessary for every test you will write in your application.

  eg: ThemeProvider, ReduxStoreProvider

- Would'nt it be nice if there will be a way to specify the Wrapper component only just once for every test in the app.


Steps to Achieve:
-----------------

* get custom render function code from Testing-Library website.

* make a file test-utils.tsx in src folder and pasted the copied code in that file.

* Make few necessary changes by remving extra unwanted code.

code:
-----
import { ReactElement } from 'react'
import { render, RenderOptions } from '@testing-library/react'
import { AppProvider } from './components/Providers/app-providers'

const customRender = (
  ui: ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => render(ui, { wrapper: AppProvider, ...options })

export * from '@testing-library/react'
export { customRender as render }


* Now in ur testing file, import render and screen from newly created file test-utils.tsx.

  -> import { render, screen } from '../../test-utils'




40) Custom React Hooks:
=======================

- For Testing custom hooks, we dont reply on { render, screen } from RTL.

- Because render() method accepts a React Component that returns JSX, which forms our Virtual DOM.

- But a custom hook does not return any jsx and hence render() method will not work.

- Hence we use renerHook() from RTL, that accepts custom hook as paramater, invokes it inside a functional component and returns an    
  object from whcih we destructure { result }.

- result.current poperty that gives us all the values returned from custom Hook. 

- And we have to invoke the custom hooks with props, we pass in a 2nd arg to renderHook() method which is an options object with a   
  key called initialProps.



41) act() utility:
==================

- Whne testing custom hooks or code that causes state updates like increment() and decrement() in our case,

- RTL cannot wrap them (setState which is internally called by increment() function) with act() utility function.

- act() helps us to process and complete the DOM updates before we make our assertions.

- We have to manually import it and wrap code that causes state updates.

- For the most part RTL wraps every method it exposes with act().

- Having to import it manually and use is a rare scenario like currently we had.


without act() wrapping we get this warning from RTL:
----------------------------------------------------
 -> Warning: An update to TestComponent inside a test was not wrapped in act(...).

 -> When testing, code that causes React state updates should be wrapped into act(...):

eg: Hooks / use-Counter


42) Mocking functions:
======================

- Mock functions allows you to test your code without having to worry about the actual implmentation of the function.

- We use JEST to create mock functions by calling it as jest.fn()

eg: CounterTwo folder


example:
--------

 test('Increment and Decrement handlers are called', async () => {
    user.setup()
    
    // Creates a mock function. Optionally takes a mock implementation.
    const incrementHandler = jest.fn();
    const deccrementHandler = jest.fn();

    render(<CounterTwo count={0} handleIncrement={incrementHandler} handleDecrement={deccrementHandler}/>)

    const incrementButton = screen.getByRole('button', {
      name: 'Increment'
    })

    const decrementButton = screen.getByRole('button', {
      name: 'Decrement' 
    })

    await user.click(incrementButton)
    await user.click(decrementButton)

    expect(incrementHandler).toHaveBeenCalledTimes(1)
    expect(deccrementHandler).toHaveBeenCalledTimes(1)
  })
 


43) Mocking HTTP requests:
==========================

- Users Folder has the code.

- We need to write a test to ensure the list of users is displayed or an error message is displayed if there is any error. 

- We can go ahead and write the tests but there is a very important consideration that has to be made.

- Real Apis are primarily used for end to end test and not for unit or functional test.

- For one, We don't have to ensure that server is up and running to test whether component renders as intended.

- And Two, Since these tests are run quite often, it is not feasible to include real APIs, which may even charge you based on the 
  number of requests.

- What we have to do is instead is mock the HTTP request in our test.

- In our case, we mock the response to the request with the list of users or an error.

- For mocking, when writing tests with RTL we make use of 'msw' (Mock Service Worker) package.

- It is an API mocking library that uses service worker API to intercept actual request.

- It is the closest thing to mocking a server without having to create one.

 
44) msw setup:
==============

- Install msw using yarn add msw --dev

- create a mocks folder in src/components and create a file server.ts

- copy pasted code from msw website


eg:
---
// src/mocks/server.js
import { setupServer } from 'msw/node'
import { handlers } from './handlers'

// This configures a request mocking server with the given request handlers.
export const server = setupServer(...handlers)


45) MSW handlers:
=================

- create a new file handlers.ts in mocks folder.

- import { rest } from 'msw'

- export an array of handlers -> export const handlers = []

- each handler is a combination of

   * methods like get/post etc, 
   * the path to the api endpoint and 
   * a function which returns the mock response.

- that function takes req, rep, and ctx and parameter.

eg:
---
import { rest } from 'msw'

export const handler = [
  rest.get('https://jsonplaceholder.typicode.com/users', (req, res, ctx) => {
    return res(
      ctx.status(200),
      ctx.json(
        [
          {
            name: 'Bruce Wayne'
          },
          {
            name: 'Clarke Kent'
          },
          {
            name: 'Princess Diana'
          }
        ]
      )
    )
  })
]

- finally this is provided as an argument to setUpServer() method in server.ts file.


46) Testing with msw:
=====================

- We write test to check user listitems has length of 3, which is no of user names we have mocked previousaly.

- But we get this error: Expected length: 3
                         Received length: 10

- This is because our mocked server is not linked yet with our test file and test is getting length 10 which is length from actual 
  JSON Placeholder api call.

- To fix this we visit docs -> https://mswjs.io/docs/getting-started/integrate/node

- copy this code from doc under setup section -> Using Create React App heading -> to setupTests.ts file in our vscode project.

// src/setupTests.js
import { server } from './components/mocks/server'
// Establish API mocking before all tests.
beforeAll(() => server.listen())

// Reset any request handlers that we may add during the tests,
// so they don't affect other tests.
afterEach(() => server.resetHandlers())

// Clean up after the tests are finished.
afterAll(() => server.close())


- For coding convention purpose we move mocked usernames array in seprate file called usernamearray.ts

- We import this in handler.ts file and test file and use it.



47) MSW Error handling:
=======================

- We want to write test for error message when the api call fails.

- But our mock server is retruning response with status code 200 which is for success.

- If we change the status code to 500 for error and try to proceed, it will get applied to all the tests written in test file.

- So this is not an ideal approach to follow.

- Instead we can just make server return failure response only inside the particular failure test and by doing so, we need not to  
  worry that this will get carried outside of this test, because it will not.

- The reason is we are resetting server after every test in being ran in setUpTest.ts file.


Steps to be followed to achieve goal:
-------------------------------------

- import rest from msw, and our mock server in test file.

- get hold of server inside particular test file using server.use()

- inside server.use(--here--), write logic to make server return failure response which will make <p> tag to render error message
  inside our artifical DOM.

- make sure to use async, await because we use findBy() query in this case which is appropriate for such scenarios of appearance and  
  disappearance of DOM elements asynchronousaly.


eg:
---

test('renders error message', async () => {
    server.use(
      rest.get('https://jsonplaceholder.typicode.com/users', (req, res, ctx) => {
        return res(
          ctx.status(500)
        )
      })
    )

    render(<Users />)
    const errorMessageElement = await screen.findByText('Error', { exact: false})
    expect(errorMessageElement).toBeInTheDocument()
})



-------------------------------------------------------------------------------------------------------------------------------------


48) Static Analysis testing:
============================

- Process of verifying that your code meet certain expectations without actually running it.

* Ensures consisten style and formatting.

* Check for common mistakes and possible bugs

* Limit the complexity of the code.

* Verify type consistencey.


Our Normal Testing vs Static Analysis Testing:
----------------------------------------------

- All types of tests runs the code and then compare the outcome against known expected outputs to see if everything works OK.

- Where Static Testing analyses aspects such as:
  
  * Readability
  * Consistency
  * Error Handling
  * Type checking
  * Alignment with best practises

- Testing checks YOUR CODE WORKS OR NOT.

- Static Analysis Testing checks YOUR CODE IS WRITTEN WELL OR NOT.


Tools for SAT:
--------------
* Typescript
* Eslint
* Prettier
* Husky
* lint-staged



49) ESlint:
===========

- It is a tool for identifying and reporting on patterns found in ECMAScript/Javascript code, with the goal of making code more 
  consistent and avoiding bugs.

- Install ESLint extension in vs code.

  eg: using const variable before declaration shows a compile time error.

- Create react app also installs the testing library plugin for eslint by default.
  
  eg: using async await with getBy queries will show u error warnings

- To add JEST Dom plugin for Eslint  -> yarn add -D eslint-plugin-jest-dom

  - Then in package.json, eslintconfig section, in the extends array, 'plugin: jest-dom/recommended' 
  - Ths will add a list of recommended rules while using JEST dom macthers.

  expect(

- To run eslint with a npm script, that will allow every developer in the team to run one command and identify if there are errors in the project.
 
  - in package.json scripts section ->  "lint": "eslint --ignore-path .gitignore .",

  - run yarn lintcor npm run lint to check output.

